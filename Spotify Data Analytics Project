Spotify Data Analytics Project

Creating Table and adding data values to the database using .csv file in SQLite studio


CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )




Queries
1. # #To have an overview of the dataset# #

SELECT * FROM BIT_DB.Spotifydata;


2. ## to check the number of tracks per artist##

SELECT artist_name, COUNT(track_name) AS total_tracks
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY total_tracks desc;


3. ### total number of artists that are in the Spotify list ###

WITH spotify_CTE  AS ( 
SELECT 
S.artist_name, 
COUNT(S.track_name) AS total_tracks
FROM  Spotifydata AS S
GROUP BY S.artist_name
ORDER BY total_tracks desc
)
SELECT COUNT(artist_name) AS total_artist_no 
FROM spotifY_CTE;





4.  ### TOP Artistsâ€™ list : Artist with Average popularity >= 90 ###

WITH popularity_average_CTE AS (
SELECT s.artist_name,
AVG(s.popularity) AS average_popularity
FROM SpotifyData s 
GROUP BY s.artist_name
)
 
SELECT  artist_name,
        average_popularity,
        'Top Artist' AS tag
FROM popularity_average_CTE
WHERE average_popularity>=90;




5.

SELECT artist_name, track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity desc;



6. ###  Top 10 artist with avg popularity rate with respect to their tracks in the Spotify list

SELECT artist_name, AVG(popularity) as popularity_rate, COUNT(track_name)
FROM BIT_DB.Spotifydata
GROUP BY artist_name 
ORDER BY popularity_rate desc
limit 10;



7.###  avg danceability with tempo wise list for uplifting/upbeating music   ###

SELECT artist_name, track_name, 
AVG(danceability) AS avg_dancing_rate, tempo
FROM BIT_DB.Spotifydata
GROUP BY artist_name 
ORDER BY tempo desc;


8.##artists with avg danceability >0.750 and avg tempo for their songs mentioned in the Spotify list  ##

SELECT artist_name,
ROUND(AVG(danceability),2), ROUND(AVG(tempo),1)
from  BIT_DB.Spotifydata
GROUP BY artist_name
HAVING danceability> 0.750
ORDER BY danceability desc;


9. ## uplifting/ up-beating songs where danceability and speed of the beats is more than avg###


SELECT artist_name, track_name,
danceability, tempo
from  BIT_DB.Spotifydata
where danceability >0.750 and tempo >= 120
order by danceability desc;

10.## highest danceability##


SELECT artist_name, track_name,
MAX(danceability)
from  BIT_DB.Spotifydata ;
